"use strict";
(self.webpackJsonp__wix_thunderbolt_app = self.webpackJsonp__wix_thunderbolt_app || []).push([
    [6121], {
        82785: function(e, i, t) {
            t.r(i), t.d(i, {
                AUTH_RESULT_REASON: function() {
                    return y.$9
                },
                BIEvents: function() {
                    return R
                },
                INTERACTIONS: function() {
                    return y.SE
                },
                PrivacyStatus: function() {
                    return Q.iY
                },
                PrivacyStatusStatus: function() {
                    return P
                },
                Role: function() {
                    return O
                },
                SiteMembersApiSymbol: function() {
                    return E.n9
                },
                Status: function() {
                    return I
                },
                isLoginAcceptableError: function() {
                    return k.Y2
                },
                isSignupAcceptableError: function() {
                    return k.fJ
                },
                memberDetailsFromDTO: function() {
                    return k.Ky
                },
                page: function() {
                    return le
                },
                site: function() {
                    return re
                }
            });
            var o = t(43757),
                a = t(61049),
                n = t(49574),
                s = t(5096),
                r = t(55048),
                l = t(10666),
                c = t(58629),
                d = t(26513),
                u = t(82627),
                g = t(94315),
                p = t(25954),
                m = t(8562),
                h = t(21511),
                v = t(56405),
                b = t(19238),
                C = t(87821),
                S = t(86305),
                w = t(99552),
                f = t(16684),
                y = t(95848),
                E = t(2811);
            class D {
                constructor(e, i, t, o, a) {
                    this.propsStore = e, this.structureApi = i, this.siteScrollBlocker = t, this.browserWindow = o, this.cyclicTabbing = a
                }
                async displayDialog(e, i, t, o = {}) {
                    const a = async () => {
                            (0, m.yF)(this.browserWindow) || (this.activeElementBeforeShowDialog = this.browserWindow.document.activeElement);
                            const o = (0, f.uniqueId)(E.rj);
                            this.propsStore.update({
                                [o]: Object.assign(Object.assign({}, i), t)
                            }), this.currentCompId && this.cyclicTabbing.disableCyclicTabbing(this.currentCompId), this.cyclicTabbing.enableCyclicTabbing(o), await this.structureApi.addComponentToDynamicStructure(o, {
                                componentType: e,
                                components: []
                            }), this.currentCompId && (this.structureApi.removeComponentFromDynamicStructure(this.currentCompId), this.siteScrollBlocker.setSiteScrollingBlocked(!1, this.currentCompId)), this.siteScrollBlocker.setSiteScrollingBlocked(!0, o), this.currentCompId = o
                        },
                        {
                            shouldWaitForAppDidMount: n,
                            registerToAppDidMount: s
                        } = o;
                    n && s ? s(a) : await a()
                }
                hideDialog() {
                    var e;
                    this.currentCompId && (this.structureApi.removeComponentFromDynamicStructure(this.currentCompId), this.siteScrollBlocker.setSiteScrollingBlocked(!1, this.currentCompId), this.cyclicTabbing.disableCyclicTabbing(this.currentCompId)), this.currentCompId = void 0, (0, m.yF)(this.browserWindow) || (null === (e = this.activeElementBeforeShowDialog) || void 0 === e || e.focus(), this.activeElementBeforeShowDialog = null)
                }
            }
            var P, I, O;
            ! function(e) {
                e.UNKNOWN = "UNKNOWN", e.PRIVATE = "PRIVATE", e.PUBLIC = "PUBLIC"
            }(P || (P = {})),
            function(e) {
                e.UNKNOWN = "UNKNOWN", e.PENDING = "PENDING", e.APPROVED = "APPROVED", e.BLOCKED = "BLOCKED", e.OFFLINE = "OFFLINE"
            }(I || (I = {})),
            function(e) {
                e.UNDEFINED_ROLE = "UNDEFINED_ROLE", e.MEMBER = "MEMBER", e.OWNER = "OWNER", e.CONTRIBUTOR = "CONTRIBUTOR"
            }(O || (O = {}));
            var k = t(43096),
                L = t(42473),
                A = t(86681);
            const R = ({
                    sessionManager: e,
                    businessLogger: i,
                    wixBiSession: t,
                    viewMode: o,
                    language: a
                }) => {
                    const n = (i, n) => ({
                        biToken: t.msId,
                        context: i,
                        ts: T(t),
                        viewmode: o,
                        visitor_id: e.getVisitorId(),
                        site_member_id: e.getSiteMemberId(),
                        vsi: t.viewerSessionId,
                        site_settings_lng: a.siteLanguage,
                        browser_lng: a.userLanguage,
                        lng_mismatch: a.siteLanguage !== a.userLanguage,
                        layout: n
                    });
                    return {
                        loginOrSignUpDialogLoaded: (e, t = "fullscreen") => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 658
                            }, n(e, t)), {
                                endpoint: "site-members"
                            })
                        },
                        closingDialog: (e, t = "fullscreen") => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 602,
                                form_type: "default"
                            }, n(e, t)), {
                                endpoint: "site-members"
                            })
                        },
                        emailAuthSubmitClicked: (e, t) => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 603,
                                form_type: "default"
                            }, n(e, t)), {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersFeatureLoaded: () => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 698
                            }, n()), {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersSdkFeatureLoaded: () => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 699
                            }, n()), {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersEmailConfirmationNewMembersModalLoad: () => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 1809
                            }, n()), {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersEmailConfirmationSendCodeClick: () => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 1810
                            }, n()), {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersEmailConfirmationOnResendCodeClick: () => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 1811
                            }, n()), {
                                endpoint: "site-members"
                            })
                        }
                    }
                },
                T = e => {
                    const i = e.initialTimestamp || 0;
                    return Date.now() - i
                },
                N = {
                    isCloseable: !0,
                    returnPages: !1
                };
            class _ {
                constructor(e, i) {
                    this.shouldRunCustomPopupCloseCallback = !0, this.popups = e, this.onReset = i, this.config = N
                }
                async openPopupPage(e, i) {
                    var t;
                    const o = this.shouldRunCustomPopupCloseCallback;
                    this.preventCustomPopupCloseCallback(), await (null === (t = this.popups) || void 0 === t ? void 0 : t.open(e, (() => {
                        this.shouldRunCustomPopupCloseCallback && (this.rejectAuthenticationRequest(), i && i())
                    }))), this.shouldRunCustomPopupCloseCallback = o
                }
                preventCustomPopupCloseCallback() {
                    this.shouldRunCustomPopupCloseCallback = !1
                }
                allowCustomPopupCloseCallback() {
                    this.shouldRunCustomPopupCloseCallback = !0
                }
                assignRequestAuthenticationRejection(e) {
                    this.requestAuthenticationRejectInstance = this.requestAuthenticationRejectInstance || e
                }
                assignRequestAuthenticationResolveInstance(e) {
                    this.requestAuthenticationResolveInstance = this.requestAuthenticationResolveInstance || e
                }
                assignRequestAuthenticationPromise(e, i) {
                    this.requestAuthenticationRejectInstance = this.requestAuthenticationRejectInstance || i, this.requestAuthenticationResolveInstance = this.requestAuthenticationResolveInstance || e
                }
                rejectAuthenticationRequest() {
                    this.requestAuthenticationRejectInstance && (this.requestAuthenticationRejectInstance(y.$9.CANCELED), this.reset())
                }
                resolveAuthenticationRequest(e) {
                    this.requestAuthenticationRejectInstance && (this.requestAuthenticationResolveInstance(e), this.reset())
                }
                setConfig({
                    isCloseable: e = !0,
                    returnPages: i = !1
                }) {
                    this.config = {
                        isCloseable: e,
                        returnPages: i
                    }
                }
                reset() {
                    var e;
                    null === (e = this.onReset) || void 0 === e || e.call(this), this.requestAuthenticationRejectInstance = void 0, this.requestAuthenticationResolveInstance = void 0, this.config = N
                }
            }
            const U = e => {
                    var i, t;
                    const o = null === (i = e.joinCommunityCheckedByDefault) || void 0 === i || i,
                        a = null !== (t = e.privacyNoteType) && void 0 !== t ? t : "CHECKBOX";
                    return o ? a : "CHECKBOX"
                },
                M = e => {
                    var i;
                    return "NOTE" === U(e) || (null === (i = e.joinCommunityCheckedByDefault) || void 0 === i || i)
                },
                B = {
                    [I.APPROVED]: "ACTIVE",
                    [I.PENDING]: "PENDING"
                },
                j = e => {
                    var i;
                    return e && null !== (i = B[e]) && void 0 !== i ? i : "APPLICANT"
                };
            var F = t(34584),
                $ = t(48511),
                V = t(26034),
                x = {
                    value: "_customValue"
                },
                G = {
                    numValue: "DOUBLE",
                    dateValue: "google.protobuf.Timestamp",
                    listValue: "_listValue",
                    mapValue: "_mapValue"
                },
                q = {
                    createdDate: "google.protobuf.Timestamp",
                    updatedDate: "google.protobuf.Timestamp",
                    identityProfile: "_identityProfile"
                },
                W = {
                    customFields: "_customField"
                },
                z = {
                    value: "_customValue"
                },
                K = {},
                Y = {
                    identity: "_identity",
                    additionalData: "Map#_customValue"
                },
                J = {
                    value: "Map#_customValue"
                },
                H = {
                    identity: "_identity"
                };

            function X(e) {
                return (0, $.Kk)(Object.assign(e, {
                    domainToMappings: {
                        _: [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "manage._base_domain_": [{
                            srcPath: "/_api/authentication",
                            destPath: ""
                        }],
                        "users._base_domain_": [{
                            srcPath: "/authentication",
                            destPath: ""
                        }, {
                            srcPath: "/iam/wix/google",
                            destPath: "/v1/sso/callback/root/0e6a50f5-b523-4e29-990d-f37fa2ffdd69"
                        }],
                        "dev._base_domain_": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "bo._base_domain_": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "www.wixapis.com": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        _base_domain_: [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "www._base_domain_": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }]
                    }
                }))
            }
            var Q = t(74880);
            const Z = (e, i, t) => {
                    document.cookie = `${e}=;max-age=0`, document.cookie = `${e}=;max-age=0;path=${i}`, document.cookie = `${e}=;domain=${t};max-age=0`, document.cookie = `${e}=;domain=${t};max-age=0;path=${i}`
                },
                ee = (0, o.ff)([(0, o.t6)(a.R9, E.u2), (0, o.t6)(a.jC, E.u2), (0, o.t6)(a.Wf, E.u2), (0, o.t6)(a.z8, E.u2), n.U, s.EE, s.Zr, v.Xb, r.xP, r.QZ, s.bk, s.ZQ, b.F0, (0, o.jt)(C.x), b.Iz, l.$, c.sK, (0, o.jt)(S.cC), (0, o.jt)(w.I), d.jj, u.O, (0, o.jt)(g.C), (0, o.jt)(A.a), (0, o.jt)(L.I)], ((e, i, t, o, a, n, s, r, l, c, d, u, g, v, b, C, S, w, E = {
                    trackEvent: () => 0
                }, P, I, L, A, T) => {
                    var N, B, $, ee;
                    const ie = (0, p.O)(),
                        {
                            loginSocialBarOnSite: te,
                            isCommunityInstalled: oe,
                            collectionExposure: ae,
                            protectedHomepage: ne,
                            smSessionCookie: se,
                            memberInfoAppId: re,
                            smcollectionId: le,
                            isTemplate: ce
                        } = e;
                    let {
                        sm_efCookie: de
                    } = e;
                    const ue = "WixInternal" === ae,
                        ge = "22bef345-3c5b-4c18-b782-74d4085112ff",
                        pe = r.getUserSession();
                    let me = r.getAppInstanceByAppDefId(ge);
                    const he = () => (0, k.OP)(r),
                        {
                            smSettings: ve,
                            tpaApplicationIds: be,
                            policyLinks: Ce,
                            translations: Se
                        } = i,
                        we = re && be[re],
                        {
                            metaSiteId: fe,
                            externalBaseUrl: ye,
                            siteId: Ee,
                            siteRevision: De
                        } = s.site,
                        Pe = s.requestUrl,
                        Ie = s.viewMode,
                        Oe = null !== (B = null === (N = s.anywhereConfig) || void 0 === N ? void 0 : N.siteId) && void 0 !== B ? B : Ee,
                        ke = null !== (ee = null === ($ = s.anywhereConfig) || void 0 === $ ? void 0 : $.revision) && void 0 !== ee ? ee : De,
                        Le = -1 !== y.F0.findIndex((e => {
                            var i, t;
                            return null === (t = null === (i = null == u ? void 0 : u.navigator) || void 0 === i ? void 0 : i.userAgent) || void 0 === t ? void 0 : t.includes(e)
                        })),
                        Ae = !Le,
                        Re = !Le,
                        Te = `/_api/wix-sm-webapp/tokens/verify/${fe}/${Oe}`,
                        Ne = `${ye.replace(/\/$/,"")}/api/wix-sm/v1/authorize/${Oe}/pages`,
                        _e = `/_api/wix-sm-webapp/tokens/logout/${fe}`,
                        Ue = `/_api/wix-sm-webapp/member/changePasswordWithMailToken?metaSiteId=${fe}&collectionId=${le}`,
                        Me = `/_api/wix-sm-webapp/social/token/handle?metaSiteId=${fe}&collectionId=${le}`,
                        Be = ve.smFirstDialogLogin ? "login" : "signup",
                        {
                            socialLoginFacebookEnabled: je,
                            socialLoginGoogleEnabled: Fe,
                            termsOfUse: $e,
                            privacyPolicy: Ve,
                            codeOfConduct: xe,
                            customSignUpPageId: Ge,
                            customSignInPageId: qe
                        } = ve,
                        {
                            privacyNoteType: We,
                            joinCommunityCheckedByDefault: ze
                        } = ((e, i) => {
                            var t;
                            return i["specs.thunderbolt.enableSignUpPrivacyNoteType"] ? {
                                privacyNoteType: U(e),
                                joinCommunityCheckedByDefault: M(e)
                            } : {
                                privacyNoteType: "CHECKBOX",
                                joinCommunityCheckedByDefault: null === (t = e.joinCommunityCheckedByDefault) || void 0 === t || t
                            }
                        })(ve, I);
                    let {
                        smToken: Ke
                    } = e, Ye = {}, Je = se, He = null, Xe = !1;
                    const Qe = e => {
                            He = e
                        },
                        Ze = () => ({
                            registerToAppDidMount: Qe,
                            shouldWaitForAppDidMount: !Xe
                        }),
                        ei = async () => {
                            var e;
                            if (I["specs.thunderbolt.getMemberDetailsFromMembersNg"]) {
                                const {
                                    member: i
                                } = await ni("/_api/members/v1/members/my?fieldsets=FULL", {
                                    headers: {
                                        authorization: null !== (e = r.getAppInstanceByAppDefId(ge)) && void 0 !== e ? e : ""
                                    }
                                }), {
                                    role: t
                                } = await (0, k.Xh)((() => {
                                    var e;
                                    return ni(`/api/wix-sm/v1/members/${null==i?void 0:i.id}/role`, {
                                        headers: {
                                            authorization: null !== (e = r.getAppInstanceByAppDefId(ge)) && void 0 !== e ? e : ""
                                        }
                                    })
                                }), (() => ({
                                    role: O.MEMBER
                                })));
                                return (({
                                    member: e,
                                    role: i
                                }) => {
                                    var t, o, a, n, s, r, l, c, d, u, g, p, m, h, v, b, C, S, w, f, y;
                                    return {
                                        id: null !== (t = null == e ? void 0 : e.id) && void 0 !== t ? t : "",
                                        contactId: null !== (o = null == e ? void 0 : e.contactId) && void 0 !== o ? o : "",
                                        loginEmail: null !== (a = null == e ? void 0 : e.loginEmail) && void 0 !== a ? a : "",
                                        imageUrl: null !== (r = null === (s = null === (n = null == e ? void 0 : e.profile) || void 0 === n ? void 0 : n.photo) || void 0 === s ? void 0 : s.url) && void 0 !== r ? r : "",
                                        nickname: null !== (c = null === (l = null == e ? void 0 : e.profile) || void 0 === l ? void 0 : l.nickname) && void 0 !== c ? c : "",
                                        profilePrivacyStatus: null !== (d = null == e ? void 0 : e.privacyStatus) && void 0 !== d ? d : "",
                                        slug: null !== (g = null === (u = null == e ? void 0 : e.profile) || void 0 === u ? void 0 : u.slug) && void 0 !== g ? g : "",
                                        status: j(null == e ? void 0 : e.status),
                                        creationDate: null !== (p = null == e ? void 0 : e.createdDate) && void 0 !== p ? p : "",
                                        lastUpdateDate: null !== (m = null == e ? void 0 : e.updatedDate) && void 0 !== m ? m : "",
                                        lastLoginDate: null !== (h = null == e ? void 0 : e.lastLoginDate) && void 0 !== h ? h : "",
                                        emailVerified: null !== (v = null == e ? void 0 : e.loginEmailVerified) && void 0 !== v && v,
                                        role: null != i ? i : "MEMBER",
                                        owner: i === O.OWNER,
                                        firstName: null !== (C = null === (b = null == e ? void 0 : e.contact) || void 0 === b ? void 0 : b.firstName) && void 0 !== C ? C : "",
                                        lastName: null !== (w = null === (S = null == e ? void 0 : e.contact) || void 0 === S ? void 0 : S.lastName) && void 0 !== w ? w : "",
                                        memberName: `${null===(f=null==e?void 0:e.contact)||void 0===f?void 0:f.firstName} ${null===(y=null==e?void 0:e.contact)||void 0===y?void 0:y.lastName}`,
                                        groups: void 0,
                                        emails: void 0,
                                        phones: void 0,
                                        addresses: void 0,
                                        labels: void 0,
                                        customFields: void 0
                                    }
                                })({
                                    member: i,
                                    role: t
                                })
                            }
                            const i = `/_api/wix-sm-webapp/member/${Ke}?collectionId=${le}&metaSiteId=${fe}`,
                                {
                                    payload: t
                                } = await ni(i);
                            return (0, k.Ky)(t)
                        },
                        ii = {},
                        ti = {},
                        oi = R({
                            sessionManager: r,
                            businessLogger: C,
                            wixBiSession: S,
                            viewMode: null == Ie ? void 0 : Ie.toUpperCase(),
                            language: d
                        });
                    oi.siteMembersFeatureLoaded();
                    const ai = {},
                        ni = (0, k.Qn)(a, {
                            credentials: "same-origin",
                            headers: {
                                accept: "application/json",
                                "x-wix-site-revision": `${ke}`,
                                "x-wix-client-artifact-id": "thunderbolt"
                            }
                        }, Pe),
                        si = (0, F.d)({
                            isSSR: !1
                        }),
                        ri = ((e, i, t, o, a) => new D(e, i, t, o, a))(l, c, v, u, A),
                        li = ((e, i, t, o, a) => {
                            let n, s;
                            const r = async () => s || e("/_serverless/collection-settings-facade/get-settings", {
                                    headers: {
                                        "Content-Type": "application/json",
                                        authorization: a || ""
                                    }
                                }).then((e => (s = e, s))),
                                l = async () => o["specs.thunderbolt.useIAMEnabledConnections"] ? r().then((e => e.collectionSettings)) : n || e("/_api/wix-sm-webapp/v1/collection/settings", {
                                    headers: {
                                        "Content-Type": "application/json",
                                        authorization: a || ""
                                    }
                                }).then((e => e.settings)).then((e => (n = e, e)));
                            return {
                                getSiteMembersSettings: l,
                                getCaptchaSettings: () => l().then(k.B_).catch((e => (i.captureError(e, {
                                    tags: {
                                        feature: "site-members"
                                    }
                                }), t.trackEvent((0, y.RN)(y.eE.ACTIONS.SETTINGS.FAIL)), {
                                    invisible: {
                                        login: !1,
                                        signup: !1
                                    },
                                    visible: {
                                        login: !1,
                                        signup: !0
                                    }
                                }))),
                                getEnabledConnections: () => r().then((e => {
                                    var i;
                                    return null !== (i = e.enabledConnections) && void 0 !== i ? i : []
                                }))
                            }
                        })(ni, n, E, I, me),
                        ci = (0, k.eL)(u),
                        di = (0, k.kY)(u, ie),
                        ui = new _(w, (async () => {
                            const e = await li.getCaptchaSettings();
                            (e.invisible.login || e.invisible.signup) && di.hideCaptchaBadge()
                        })),
                        gi = null == T ? void 0 : T.getBsi(),
                        pi = gi ? gi.split("|")[0] : "00000000-0000-0000-0000-000000000000",
                        mi = e => {
                            n.interactionStarted(y.SE.SOCIAL_APP_LOGIN_WITH_VENDOR(e))
                        },
                        hi = {
                            appDidMount() {
                                He && He(), Xe = !0
                            },
                            async login(e, i, t, o = !1, a, n = !1, s) {
                                var r, l, c, d, u, g, p, m, h, v, b;
                                try {
                                    const s = await li.getCaptchaSettings();
                                    if (s.visible.login && !(null == t ? void 0 : t.recaptchaToken) && !(null == a ? void 0 : a.otp) && !(null == a ? void 0 : a.verificationId)) throw y.Xu;
                                    E.trackEvent((0, y.RN)(y.eE.ACTIONS.LOGIN.SUBMIT));
                                    const r = await hi.performLogin(e, i, n, s, t, a),
                                        l = await hi.handleLoginResponse(r, o);
                                    return E.trackEvent((0, y.RN)(y.eE.ACTIONS.LOGIN.SUCCESS)), l
                                } catch (a) {
                                    if ((0, k.Y2)(a) || E.trackEvent({
                                            eventName: "CustomEvent",
                                            params: {
                                                eventCategory: "Site members",
                                                eventAction: "Log in Failure",
                                                eventLabel: "Wix"
                                            }
                                        }), (null === (l = null === (r = null == a ? void 0 : a.details) || void 0 === r ? void 0 : r.applicationError) || void 0 === l ? void 0 : l.code) === y.O1.WAITING_APPROVAL && hi.showAdminApprovalDialog(e), (0, k.yQ)(a)) {
                                        const r = null === (u = null === (d = null === (c = null == a ? void 0 : a.details) || void 0 === c ? void 0 : c.applicationError) || void 0 === d ? void 0 : d.data) || void 0 === u ? void 0 : u.verificationId,
                                            l = null !== (h = null === (m = null === (p = null === (g = null == a ? void 0 : a.details) || void 0 === g ? void 0 : g.applicationError) || void 0 === p ? void 0 : p.data) || void 0 === m ? void 0 : m.verificationFailureReason) && void 0 !== h ? h : null === (b = null === (v = null == a ? void 0 : a.details) || void 0 === v ? void 0 : v.applicationError) || void 0 === b ? void 0 : b.code,
                                            C = {
                                                email: e,
                                                verificationId: r,
                                                error: l
                                            };
                                        return hi.showVerificationCodeDialog(C).then((a => {
                                            const r = {
                                                verificationId: null == C ? void 0 : C.verificationId,
                                                otp: a
                                            };
                                            return hi.login(e, i, t, o, r, n, s).catch((e => {
                                                throw n && hi.showLoginDialog(s, e), e
                                            }))
                                        })).then((e => (ri.hideDialog(), e)))
                                    }
                                    throw a
                                }
                            },
                            async performLogin(e, i, t, o, a, n) {
                                var s;
                                const r = null == w ? void 0 : w.getCurrentLightboxId(),
                                    l = null === (s = P.getCurrentRouteInfo()) || void 0 === s ? void 0 : s.pageId,
                                    c = t || qe && r && qe === r || qe && l && qe === l,
                                    d = o.invisible.login && c ? await ci(y.Ly.LOGIN) : void 0;
                                return (0, k.gb)(!!I["specs.thunderbolt.useIAMPlatform"], (async () => {
                                    var t, o;
                                    const n = [];
                                    (null == a ? void 0 : a.recaptchaToken) && n.push({
                                        Recaptcha: null == a ? void 0 : a.recaptchaToken
                                    }), d && n.push({
                                        InvisibleRecaptcha: d
                                    });
                                    const s = {
                                            identifier: {
                                                email: e
                                            },
                                            inputs: {
                                                password: i
                                            },
                                            captcha_tokens: n
                                        },
                                        r = I["specs.thunderbolt.iamOverAmbassador"] ? await si.request(function(e) {
                                            var i = (0, V.G)(K, {}),
                                                t = i.toJSON,
                                                o = i.fromJSON,
                                                a = (0, V.G)(Y, {
                                                    _customField: x,
                                                    _customValue: G,
                                                    _identity: q,
                                                    _identityProfile: W,
                                                    _listValue: z,
                                                    _mapValue: J
                                                }).fromJSON;

                                            function n(i) {
                                                var o = i.host,
                                                    n = t(e);
                                                return {
                                                    entityFqdn: "wix.iam.authentication.v1.authentication",
                                                    method: "POST",
                                                    methodFqn: "wix.iam.authentication.v1.AuthenticationService.Login",
                                                    url: X({
                                                        protoPath: "/v1/login",
                                                        data: n,
                                                        host: o
                                                    }),
                                                    data: n,
                                                    transformResponse: a
                                                }
                                            }
                                            return n.fromReq = o, n
                                        }(s), {
                                            signedInstance: me || ""
                                        }).then((e => e.data)) : await ni("/_api/iam/authentication/v1/login", {
                                            method: "POST",
                                            headers: {
                                                "Content-Type": "application/json",
                                                authorization: me || ""
                                            },
                                            body: JSON.stringify(s)
                                        });
                                    return {
                                        member: (0, k.T2)(r),
                                        token: r.sessionToken,
                                        pages: (0, k.AC)(null === (t = r.additionalData) || void 0 === t ? void 0 : t.protectedPages),
                                        status: null === (o = null == r ? void 0 : r.state) || void 0 === o ? void 0 : o.status
                                    }
                                }), (async () => {
                                    var t;
                                    const o = await ni("/_api/wix-sm-webapp/v1/auth/login", {
                                        method: "POST",
                                        headers: {
                                            "Content-Type": "application/json",
                                            authorization: me || ""
                                        },
                                        body: JSON.stringify({
                                            email: e,
                                            password: i,
                                            recaptchaToken: null == a ? void 0 : a.recaptchaToken,
                                            invisibleRecaptchaToken: d,
                                            emailVerification: n
                                        })
                                    });
                                    return {
                                        member: o.member,
                                        token: null === (t = null == o ? void 0 : o.session) || void 0 === t ? void 0 : t.token
                                    }
                                }))
                            },
                            async handleOauthToken(e, i, t, o, a = !1) {
                                const s = r.getVisitorId();
                                n.interactionStarted(y.SE.SOCIAL_APP_LOGIN), E.trackEvent((0, y.RN)(y.eE.ACTIONS.LOGIN.SUBMIT, i));
                                try {
                                    const {
                                        payload: r
                                    } = await ni(Me, {
                                        method: "POST",
                                        headers: {
                                            "Content-Type": "application/json"
                                        },
                                        body: JSON.stringify({
                                            svSession: pe,
                                            visitorId: s,
                                            token: e,
                                            provider: i,
                                            mode: t,
                                            lang: d.userLanguage,
                                            privacyStatus: o
                                        })
                                    });
                                    let l, c;
                                    n.interactionEnded(y.SE.SOCIAL_APP_LOGIN), n.interactionEnded(y.SE.SOCIAL_APP_LOGIN_WITH_VENDOR(i)), r.smSession && (c = r.smSession.siteMemberDto, l = r.smSession.sessionToken), c = r.siteMemberDto;
                                    const g = (0, k.Ky)(c);
                                    (0, k.kS)(u, Pe, {});
                                    const p = await hi.handleLoginResponse({
                                        member: g,
                                        token: l
                                    }, a);
                                    return E.trackEvent((0, y.RN)(y.eE.ACTIONS.LOGIN.SUCCESS, i)), p
                                } catch (e) {
                                    throw E.trackEvent((0, y.RN)(y.eE.ACTIONS.LOGIN.FAIL, i)), e
                                }
                            },
                            async handleSocialLoginResponse(e, i, t = !1) {
                                var o;
                                const a = null !== (o = y.KG[i]) && void 0 !== o ? o : i;
                                n.interactionStarted(y.SE.SOCIAL_APP_LOGIN), n.interactionEnded(y.SE.SOCIAL_APP_LOGIN), n.interactionEnded(y.SE.SOCIAL_APP_LOGIN_WITH_VENDOR(a)), E.trackEvent((0, y.RN)(y.eE.ACTIONS.LOGIN.SUBMIT, a));
                                const s = (0, k.yL)(e);
                                (0, k.kS)(u, Pe, {});
                                const r = await hi.handleLoginResponse(s, t);
                                return E.trackEvent((0, y.RN)(y.eE.ACTIONS.LOGIN.SUCCESS, a)), r
                            },
                            async handleLoginResponse({
                                token: e,
                                member: i,
                                pages: t,
                                status: o
                            }, a = !1) {
                                const n = i.emailVerified;
                                if (!e && !n && "ACTIVE" === i.status) return hi.showConfirmationEmailDialog(i.id);
                                if (!e || "REQUIRE_OWNER_APPROVAL" === o) return hi.showAdminApprovalDialog(i.loginEmail);
                                (0, k.kS)(u, Pe, {
                                    sessionToken: e
                                });
                                const s = await hi.applySessionToken(e, i, a && !t, !!t),
                                    r = null != t ? t : s;
                                return Object.assign({
                                    sessionToken: e,
                                    member: i
                                }, a ? {
                                    pages: r
                                } : {})
                            },
                            async promptLogin(e, i, t) {
                                var o, a, n, s;
                                void 0 === e && (e = {}), void 0 === i && (i = null === (a = null === (o = ui.config) || void 0 === o ? void 0 : o.isCloseable) || void 0 === a || a), void 0 === t && (t = null !== (s = null === (n = ui.config) || void 0 === n ? void 0 : n.returnPages) && void 0 !== s && s);
                                const {
                                    mode: r,
                                    modal: l
                                } = e, c = "login" === (null != r ? r : Be), u = l ? "popup" : "fullscreen";
                                return ce ? (await hi.showNotificationDialog(Se.templateNotificationTitle, Se.templateNotificationMessage, Se.containerOk), Promise.reject(y.$9.CANCELED)) : (di.loadScript(d.userLanguage, y.mz), c ? hi.showLoginDialog({
                                    isCloseable: i,
                                    displayMode: u,
                                    returnPages: t
                                }) : hi.showSignUpDialog({
                                    isCloseable: i,
                                    displayMode: u,
                                    returnPages: t
                                }))
                            },
                            promptForgotPassword(e = !0) {
                                return new Promise(((i, t) => {
                                    ui.assignRequestAuthenticationPromise(i, t);
                                    const o = {
                                            isCloseable: e,
                                            directionByLanguage: d.directionByLanguage,
                                            translations: Se
                                        },
                                        a = {
                                            async onCloseDialogCallback() {
                                                (0, k.CY)(Pe, u), oi.closingDialog("RequestResetPassword"), ri.hideDialog(), ui.rejectAuthenticationRequest()
                                            },
                                            onSubmitCallback(e) {
                                                return hi.sendForgotPasswordMail(e).then((async () => {
                                                    const e = () => {
                                                        (0, k.CY)(Pe, u), ui.resolveAuthenticationRequest(), t(y.$9.CANCELED)
                                                    };
                                                    hi.showNotificationDialog(Se.resetPasswordCheckEmailTitle, Se.resetPasswordCheckEmailText, Se.resetPasswordOk, e, e)
                                                }))
                                            }
                                        },
                                        n = Ze();
                                    ri.displayDialog("RequestPasswordResetDialog", o, a, n)
                                }))
                            },
                            async requestAuthentication(e = {}) {
                                if (Je) return {
                                    success: !0,
                                    token: Je,
                                    reason: y.$9.ALREADY_LOGGED_IN
                                };
                                try {
                                    const i = !ne,
                                        {
                                            sessionToken: t
                                        } = await hi.promptLogin(e, i);
                                    return {
                                        success: !0,
                                        token: t,
                                        reason: y.$9.SUCCESS
                                    }
                                } catch (e) {
                                    return {
                                        success: !1,
                                        reason: e
                                    }
                                }
                            },
                            async requestAuthorizedPages(e = {}) {
                                if (Ke) {
                                    return {
                                        success: !0,
                                        pages: await hi.authorizeMemberPagesBySignedInstance(Ke)
                                    }
                                }
                                try {
                                    const i = !ne;
                                    ui.setConfig({
                                        isCloseable: i,
                                        returnPages: !0
                                    });
                                    const t = await hi.promptLogin(e, i, !0);
                                    return ui.reset(), {
                                        success: !0,
                                        pages: t.pages
                                    }
                                } catch (e) {
                                    return {
                                        success: !1,
                                        reason: e
                                    }
                                }
                            },
                            async applySessionToken(e, i, t = !1, a = !1) {
                                n.interactionStarted(y.SE.VERIFY_TOKEN);
                                const s = await (a ? ni(`/_api/iam/cookie/v1/createSessionCookie?sessionToken=${e}`, {
                                    method: "GET",
                                    headers: {
                                        authorization: me || ""
                                    }
                                }) : ni(Te, {
                                    method: "POST",
                                    body: `token=${e}`
                                }));
                                var l;
                                if (n.interactionEnded(y.SE.VERIFY_TOKEN), await r.loadNewSession({
                                        reason: "memberLogin"
                                    }), me = r.getAppInstanceByAppDefId(ge), Ke = r.getSmToken(), Je = e, Ye = null != i ? i : await hi.getMemberDetails(), await (l = Ye, Promise.all(Object.entries(ii).map((async ([e, i]) => {
                                        try {
                                            if ("$$$timeout$$$" === await Promise.race([i(l), (0, k._v)(3e3).then((() => "$$$timeout$$$"))])) throw new Error(`callback ${e} timed out`)
                                        } catch (e) {
                                            n.captureError(e, {
                                                tags: {
                                                    feature: "site-members"
                                                }
                                            })
                                        }
                                    })))), o.export({
                                        memberDetails: Ye
                                    }), t) return s.payload.pages
                            },
                            async authorizeMemberPagesByCookie() {
                                const e = (0, m.yF)(u) ? {
                                        headers: {
                                            cookie: `smSession=${se}`
                                        }
                                    } : void 0,
                                    {
                                        authorizedPages: i
                                    } = await ni(Ne, e);
                                return i
                            },
                            async authorizeMemberPagesByToken(e) {
                                if (e === se) return this.authorizeMemberPagesByCookie();
                                const {
                                    payload: i
                                } = await ni(Te, {
                                    method: "POST",
                                    body: `token=${e}`
                                }), {
                                    pages: t
                                } = i;
                                return t
                            },
                            async authorizeMemberPagesBySignedInstance(e) {
                                const i = {
                                        headers: {
                                            authorization: e
                                        }
                                    },
                                    {
                                        authorizedPages: t
                                    } = await ni(Ne, i);
                                return t
                            },
                            async getMemberDetails(e = !1) {
                                return Ye.id && !e ? Ye : Ke ? (Ye = await ei(), o.export({
                                    memberDetails: Ye
                                }), e && await (i = Ye, Promise.all(Object.values(ai).map((async e => {
                                    try {
                                        await e(i)
                                    } catch (e) {
                                        n.captureError(e, {
                                            tags: {
                                                feature: "site-members"
                                            }
                                        })
                                    }
                                })))), Ye) : null;
                                var i
                            },
                            async register(e, i, t, o, a, s, r, l, c) {
                                var d, g, p, m, h, v, b, C, S, f;
                                s = null != s && s;
                                try {
                                    const c = await li.getCaptchaSettings();
                                    if (c.visible.signup && "Enabled" !== I["specs.ShouldPassCaptchaVerificationOnSignupSpec"] && !r && !(null == l ? void 0 : l.otp) && !(null == l ? void 0 : l.verificationId)) throw y.Xu;
                                    n.interactionStarted(y.SE.CODE_SIGNUP), E.trackEvent((0, y.RN)(y.eE.ACTIONS.SIGNUP.SUBMIT));
                                    const g = null == w ? void 0 : w.getCurrentLightboxId(),
                                        p = null === (d = P.getCurrentRouteInfo()) || void 0 === d ? void 0 : d.pageId,
                                        m = a || Ge && g && Ge === g || Ge && p && Ge === p,
                                        h = c.invisible.signup && m ? await ci(y.Ly.SIGNUP) : void 0,
                                        {
                                            member: v,
                                            sessionToken: b,
                                            pages: C,
                                            status: S
                                        } = await hi.performRegister(e, i, {
                                            contactInfo: t,
                                            profilePrivacyStatus: o,
                                            isDefaultFlow: a,
                                            recaptchaToken: r,
                                            invisibleRecaptchaToken: h,
                                            emailVerification: l
                                        }),
                                        f = v.emailVerified,
                                        D = "ACTIVE" === (null == v ? void 0 : v.status) ? "ACTIVE" : "PENDING";
                                    if (!b && !f && "ACTIVE" === v.status) return n.interactionEnded(y.SE.CODE_SIGNUP), hi.showConfirmationEmailDialog(v.id);
                                    if (a && "APPLICANT" === (null == v ? void 0 : v.status) || !b || "REQUIRE_OWNER_APPROVAL" === S) return n.interactionEnded(y.SE.CODE_SIGNUP), hi.showAdminApprovalDialog(e);
                                    (0, k.kS)(u, Pe, {
                                        sessionToken: b
                                    });
                                    const O = await hi.applySessionToken(b, v, s && !C, !!C),
                                        L = null != C ? C : O;
                                    return n.interactionEnded(y.SE.CODE_SIGNUP), E.trackEvent((0, y.RN)(y.eE.ACTIONS.SIGNUP.SUCCESS)), E.trackEvent({
                                        eventName: "CompleteRegistration",
                                        params: {
                                            origin: "Site members",
                                            method: "Wix"
                                        }
                                    }), Object.assign({
                                        member: v,
                                        status: D,
                                        sessionToken: b
                                    }, s && L ? {
                                        pages: L
                                    } : {})
                                } catch (l) {
                                    if ((0, k.yQ)(l)) {
                                        const n = await li.getSiteMembersSettings(),
                                            d = null === (m = null === (p = null === (g = null == l ? void 0 : l.details) || void 0 === g ? void 0 : g.applicationError) || void 0 === p ? void 0 : p.data) || void 0 === m ? void 0 : m.verificationId,
                                            u = null !== (C = null === (b = null === (v = null === (h = null == l ? void 0 : l.details) || void 0 === h ? void 0 : h.applicationError) || void 0 === v ? void 0 : v.data) || void 0 === b ? void 0 : b.verificationFailureReason) && void 0 !== C ? C : null === (f = null === (S = null == l ? void 0 : l.details) || void 0 === S ? void 0 : S.applicationError) || void 0 === f ? void 0 : f.code,
                                            w = {
                                                email: e,
                                                verificationId: d,
                                                error: u
                                            };
                                        return hi.showVerificationCodeDialog(w).then((l => {
                                            const d = {
                                                verificationId: null == w ? void 0 : w.verificationId,
                                                otp: l
                                            };
                                            return "DURING_SIGNUP" !== n.emailVerificationOption ? hi.login(e, i, {
                                                recaptchaToken: r
                                            }, s, d, a).then((e => {
                                                var i;
                                                const t = "ACTIVE" === (null === (i = null == e ? void 0 : e.member) || void 0 === i ? void 0 : i.status) ? "ACTIVE" : "PENDING";
                                                return Object.assign(Object.assign({}, e), {
                                                    status: t
                                                })
                                            }), (e => {
                                                throw a && hi.showLoginDialog(c, e), e
                                            })) : hi.register(e, i, t, o, a, s, r, d, c).catch((e => {
                                                throw a && hi.showSignUpDialog(c, e), e
                                            }))
                                        })).then((e => (ri.hideDialog(), e)))
                                    }
                                    throw (0, k.fJ)(l) ? n.interactionEnded(y.SE.CODE_SIGNUP) : E.trackEvent((0, y.RN)(y.eE.ACTIONS.SIGNUP.FAIL)), l
                                }
                            },
                            async performRegister(e, i, {
                                contactInfo: t,
                                profilePrivacyStatus: o,
                                isDefaultFlow: a,
                                recaptchaToken: n,
                                invisibleRecaptchaToken: s,
                                emailVerification: r
                            } = {}) {
                                return (0, k.gb)(!!I["specs.thunderbolt.useIAMPlatform"], (async () => {
                                    var a, r;
                                    const l = {
                                            identity: {
                                                identifiers: [{
                                                    email: e
                                                }],
                                                identityProfile: Object.assign(Object.assign({}, (0, k.AO)(t || {})), {
                                                    privacyStatus: o
                                                })
                                            },
                                            inputs: {
                                                password: i
                                            },
                                            captcha_tokens: [...n ? [{
                                                Recaptcha: n
                                            }] : [], ...s ? [{
                                                InvisibleRecaptcha: s
                                            }] : []]
                                        },
                                        c = I["specs.thunderbolt.iamOverAmbassador"] ? await si.request(function(e) {
                                            var i = (0, V.G)(H, {
                                                    _customField: x,
                                                    _customValue: G,
                                                    _identity: q,
                                                    _identityProfile: W,
                                                    _listValue: z,
                                                    _mapValue: J
                                                }),
                                                t = i.toJSON,
                                                o = i.fromJSON,
                                                a = (0, V.G)(Y, {
                                                    _customField: x,
                                                    _customValue: G,
                                                    _identity: q,
                                                    _identityProfile: W,
                                                    _listValue: z,
                                                    _mapValue: J
                                                }).fromJSON;

                                            function n(i) {
                                                var o = i.host,
                                                    n = t(e);
                                                return {
                                                    entityFqdn: "wix.iam.authentication.v1.authentication",
                                                    method: "POST",
                                                    methodFqn: "wix.iam.authentication.v1.AuthenticationService.Register",
                                                    url: X({
                                                        protoPath: "/v1/register",
                                                        data: n,
                                                        host: o
                                                    }),
                                                    data: n,
                                                    transformResponse: a
                                                }
                                            }
                                            return n.fromReq = o, n
                                        }(l)).then((e => e.data)) : await ni("/_api/iam/authentication/v1/register", {
                                            method: "POST",
                                            headers: {
                                                "Content-Type": "application/json",
                                                authorization: me || ""
                                            },
                                            body: JSON.stringify(l)
                                        });
                                    return {
                                        member: (0, k.T2)(c),
                                        sessionToken: c.sessionToken,
                                        pages: (0, k.AC)(null === (a = c.additionalData) || void 0 === a ? void 0 : a.protectedPages),
                                        status: null === (r = null == c ? void 0 : c.state) || void 0 === r ? void 0 : r.status
                                    }
                                }), (async () => {
                                    const l = {
                                            email: e,
                                            password: i,
                                            profilePrivacyStatus: o,
                                            contactInfo: (0, k.t1)(t || {}),
                                            defaultFlow: a,
                                            recaptchaToken: n,
                                            invisibleRecaptchaToken: s,
                                            emailVerification: r
                                        },
                                        {
                                            member: c,
                                            session: d
                                        } = await ni("/_api/wix-sm-webapp/v1/auth/signup", {
                                            method: "POST",
                                            headers: {
                                                "Content-Type": "application/json",
                                                authorization: me || ""
                                            },
                                            body: JSON.stringify(l)
                                        });
                                    return {
                                        member: c,
                                        sessionToken: null == d ? void 0 : d.token
                                    }
                                }))
                            },
                            async sendForgotPasswordMail(e) {
                                n.interactionStarted(y.SE.RESET_PASSWORD);
                                const i = d.userLanguage,
                                    t = encodeURIComponent(Pe),
                                    o = encodeURIComponent(e),
                                    a = I["specs.thunderbolt.iamResetPasswordFlow"] ? "/_api/iam/recovery/v1/send-email" : "/_api/wix-sm-webapp/member/sendForgotPasswordMail",
                                    s = I["specs.thunderbolt.iamResetPasswordFlow"] ? JSON.stringify({
                                        language: i,
                                        email: e,
                                        redirect: {
                                            url: Pe
                                        }
                                    }) : `returnUrl=${t}&collectionId=${le}&metaSiteId=${fe}&lang=${i}&email=${o}`,
                                    r = I["specs.thunderbolt.iamResetPasswordFlow"] ? {
                                        "Content-Type": "application/json",
                                        authorization: me || ""
                                    } : void 0;
                                await ni(a, {
                                    headers: r,
                                    method: "POST",
                                    body: s
                                }), n.interactionEnded(y.SE.RESET_PASSWORD)
                            },
                            async sendSetPasswordEmail(e, i) {
                                const t = await ni("/_api/wix-sm-webapp/members/v1/auth/members/send-set-password-email", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                        authorization: me || ""
                                    },
                                    body: JSON.stringify(Object.assign({
                                        email: e
                                    }, (null == i ? void 0 : i.hideIgnoreMessage) ? {
                                        hideIgnoreMessage: i.hideIgnoreMessage
                                    } : {}))
                                });
                                return !!(null == t ? void 0 : t.accepted)
                            },
                            async changePassword(e, i) {
                                const t = encodeURIComponent(e),
                                    o = i.startsWith(y.nc),
                                    a = o ? "/_api/iam/recovery/v1/recover" : Ue,
                                    n = o ? JSON.stringify({
                                        password: e,
                                        recovery_token: i
                                    }) : `newPassword=${t}&forgotPasswordToken=${i}`,
                                    s = o ? {
                                        "Content-Type": "application/json",
                                        authorization: me || ""
                                    } : void 0;
                                await ni(a, {
                                    method: "POST",
                                    headers: s,
                                    body: n
                                })
                            },
                            async resendEmailVerification(e) {
                                await ni(`/_api/wix-sm-webapp/tokens/email/resend/${e}`)
                            },
                            async logout(e) {
                                if (Ke) {
                                    if (await ni(_e, {
                                            method: "POST"
                                        }).catch((() => {
                                            E.trackEvent((0, y.RN)(y.eE.ACTIONS.LOGOUT.FAIL))
                                        })), await Promise.all(Object.entries(ti).map((async ([e, i]) => {
                                            try {
                                                if ("$$$timeout$$$" === await Promise.race([i(), (0, k._v)(3e3).then((() => "$$$timeout$$$"))])) throw new Error(`callback ${e} timed out`)
                                            } catch (e) {
                                                n.captureError(e, {
                                                    tags: {
                                                        feature: "site-members"
                                                    }
                                                })
                                            }
                                        }))), e) {
                                        const i = `./${e.replace(/^\//,"")}`;
                                        await g.navigate(i)
                                    }(0, m.yF)(u) || u.document.location.reload()
                                }
                            },
                            registerToUserLogin(e, i = (0, f.uniqueId)("callback")) {
                                return ii[i] = e, i
                            },
                            unRegisterToUserLogin(e) {
                                delete ii[e]
                            },
                            registerToMemberLogout(e) {
                                const i = (0, f.uniqueId)("logout_callback");
                                return ti[i] = e, i
                            },
                            unRegisterToMemberLogout(e) {
                                delete ti[e]
                            },
                            registerToMemberDetailsRefresh(e) {
                                const i = (0, f.uniqueId)("mdrcb");
                                return ai[i] = e, i
                            },
                            unRegisterToMemberDetailsRefresh(e) {
                                delete ai[e]
                            },
                            async showWelcomeDialog(e = !0) {
                                const i = {
                                        isCloseable: e,
                                        translations: Se
                                    },
                                    t = b.getParsedUrl(),
                                    o = {
                                        onCloseDialogCallback() {
                                            (0, k.CY)(Pe, u), oi.closingDialog("WelcomeDialog");
                                            const e = new URL(Pe).hostname,
                                                i = 0 === e.indexOf("www") ? e.substr(3) : e;
                                            Z("sm_ef", "/", i), de = "", ri.hideDialog(), g.navigate(t.href)
                                        },
                                        onSubmitCallback() {
                                            const e = new URL(Pe).hostname,
                                                i = 0 === e.indexOf("www") ? e.substr(3) : e;
                                            Z("sm_ef", "/", i), de = "", ri.hideDialog(), we && g.navigate("./account/my-account"), g.navigate(t.href)
                                        }
                                    };
                                n.interactionStarted(y.SE.WELCOME_DIALOG), n.interactionEnded(y.SE.WELCOME_DIALOG), ri.displayDialog("WelcomeDialog", i, o)
                            },
                            async showNoPermissionsToPageDialog(e) {
                                const i = {
                                    onCloseDialogCallback() {
                                        (0, k.CY)(Pe, u), ri.hideDialog(), e && e()
                                    },
                                    onSwitchAccountLinkClick() {
                                        hi.logout()
                                    }
                                };
                                ri.displayDialog("NoPermissionsToPageDialog", {
                                    translations: Se
                                }, i)
                            },
                            async showResetPasswordDialog(e) {
                                const i = {
                                        isCloseable: !0,
                                        isTermsOfUseNeeded: !(!(null == $e ? void 0 : $e.enabled) || !Ce.termsOfUse),
                                        isPrivacyPolicyNeeded: !(!(null == Ve ? void 0 : Ve.enabled) || !Ce.privacyPolicy),
                                        termsOfUseLink: Ce.termsOfUse,
                                        privacyPolicyLink: Ce.privacyPolicy,
                                        directionByLanguage: d.directionByLanguage,
                                        translations: Se
                                    },
                                    t = () => {
                                        const e = b.getParsedUrl();
                                        return e.searchParams.delete("forgotPasswordToken"), e.searchParams.delete("forgotPasswordLang"), b.pushUrlState(e), e
                                    },
                                    o = {
                                        onCloseDialogCallback() {
                                            (0, k.CY)(Pe, u), oi.closingDialog("ResetPasswordDialog");
                                            const e = t();
                                            ri.hideDialog(), g.navigate(e.href)
                                        },
                                        async onSubmitCallback(o) {
                                            try {
                                                await hi.changePassword(o, e), hi.showNotificationDialog(Se.resetPasswordSuccessTitle, "", Se.containerOk, (async () => {
                                                    if (e.startsWith(y.nc)) {
                                                        const e = new URL(Pe).searchParams.get("redirectUrl");
                                                        if (e) return null == u ? void 0 : u.location.replace(e)
                                                    }
                                                    const i = t();
                                                    await hi.showLoginDialog(), g.navigate(i.href)
                                                }))
                                            } catch (e) {
                                                const t = (0, k.zg)(e).toString();
                                                if (t !== y.O1.RESET_PASSWORD_TOKEN_EXPIRED && t !== y.O1.NEW_RESET_PASSWORD_TOKEN_EXPIRED) throw e;
                                                hi.showNotificationDialog(Se.passwordHasExpiredTitle, Se.passwordHasExpiredText, Se.passwordHasExpiredOk, (() => hi.promptForgotPassword(i.isCloseable).then((() => {
                                                    const e = b.getParsedUrl();
                                                    g.navigate(e.href)
                                                }))))
                                            }
                                        }
                                    };
                                ri.displayDialog("ResetPasswordDialog", i, o, Ze())
                            },
                            async showLoginDialog(e = {}, i) {
                                const {
                                    returnPages: t,
                                    isCloseable: o,
                                    displayMode: a
                                } = Object.assign({
                                    isCloseable: !0,
                                    displayMode: "fullscreen",
                                    returnPages: !1
                                }, e), s = await li.getCaptchaSettings();
                                return di.setCaptchaBadgeVisibility(s.invisible.login), qe && (null == w ? void 0 : w.isLightbox(qe)) ? hi.showCustomAuthenticationDialog(qe, t) : new Promise((async (r, l) => {
                                    ui.assignRequestAuthenticationPromise(r, l);
                                    const c = "Enabled" === I["specs.ShouldForceCaptchaVerificationOnLoginSpec"] || s.visible.login,
                                        [g, p] = (0, f.partition)(await hi.getConnections(), {
                                            appDefId: y.Ld.PASSWORD
                                        }),
                                        m = {
                                            bsi: pi,
                                            displayMode: a,
                                            language: d.userLanguage,
                                            directionByLanguage: d.directionByLanguage,
                                            isCloseable: o,
                                            smCollectionId: le,
                                            svSession: pe,
                                            biVisitorId: he(),
                                            metaSiteId: fe,
                                            isEmailLoginEnabled: g.length > 0,
                                            idps: p,
                                            shouldForceCaptchaVerification: !s.invisible.login && c,
                                            isSocialAuthSupported: Ae,
                                            serverError: i,
                                            reportBi: C.reportBi,
                                            translations: Se
                                        },
                                        v = {
                                            onCloseDialogCallback() {
                                                (0, k.CY)(Pe, u), ri.hideDialog(), oi.closingDialog("MemberLoginDialog", a), ui.rejectAuthenticationRequest()
                                            },
                                            submit(i, o, s) {
                                                return n.interactionStarted(y.SE.DEFAULT_LOGIN), oi.emailAuthSubmitClicked("MemberLoginDialog", a), hi.login(i, o, s, t, void 0, !0, e).then((e => {
                                                    n.interactionEnded(y.SE.DEFAULT_LOGIN), ri.hideDialog(), r(e)
                                                })).catch((e => {
                                                    throw (0, k.Y2)(e) && n.interactionEnded(y.SE.DEFAULT_LOGIN), e
                                                }))
                                            },
                                            onForgetYourPasswordClick() {
                                                hi.promptForgotPassword(o)
                                            },
                                            onSwitchDialogLinkClick() {
                                                hi.showSignUpDialog({
                                                    isCloseable: o,
                                                    displayMode: a,
                                                    returnPages: t
                                                }).then(r, (() => {
                                                    ui.rejectAuthenticationRequest()
                                                }))
                                            },
                                            onTokenMessage(e, i, o = !1) {
                                                let a;
                                                return oe && (a = o ? "PUBLIC" : "PRIVATE"), hi.handleOauthToken(e, i, "memberLoginDialog", a, t).then((e => {
                                                    ri.hideDialog(), r(e)
                                                }))
                                            },
                                            onBackendSocialLogin(e, i) {
                                                return hi.handleSocialLoginResponse(e, i, t).then((e => {
                                                    ri.hideDialog(), r(e)
                                                }))
                                            },
                                            getHostReadyPayload: () => ({
                                                visitorId: he(),
                                                svSession: pe
                                            }),
                                            openCaptcha: (0, h.yT)({
                                                captcha: L,
                                                userLanguage: d.userLanguage
                                            }),
                                            reportSocialAuthStarted: mi
                                        };
                                    oi.loginOrSignUpDialogLoaded("MemberLoginDialog", a), await ri.displayDialog("MemberLoginDialog", m, v, Ze()), hi.closeCustomAuthenticationDialogs(!0)
                                }))
                            },
                            async showSignUpDialog(e = {}, i) {
                                const {
                                    returnPages: t,
                                    isCloseable: o,
                                    displayMode: a
                                } = Object.assign({
                                    isCloseable: !0,
                                    displayMode: "fullscreen",
                                    returnPages: !1
                                }, e), s = await li.getCaptchaSettings();
                                if (di.setCaptchaBadgeVisibility(s.invisible.signup), Ge && (null == w ? void 0 : w.isLightbox(Ge))) return hi.showCustomAuthenticationDialog(Ge, t);
                                const r = "Enabled" !== I["specs.ShouldPassCaptchaVerificationOnSignupSpec"] && "Enabled" === I["specs.ShouldForceCaptchaVerificationOnSignupSpec"];
                                return new Promise((async (l, c) => {
                                    const g = r || s.visible.signup && "Enabled" !== I["specs.ShouldPassCaptchaVerificationOnSignupSpec"],
                                        [p, m] = (0, f.partition)(await hi.getConnections(), {
                                            appDefId: y.Ld.PASSWORD
                                        });
                                    ui.assignRequestAuthenticationPromise(l, c);
                                    const v = {
                                            bsi: pi,
                                            displayMode: a,
                                            language: d.userLanguage,
                                            directionByLanguage: d.directionByLanguage,
                                            isCloseable: o,
                                            smCollectionId: le,
                                            biVisitorId: he(),
                                            svSession: pe,
                                            metaSiteId: fe,
                                            isSocialAuthSupported: Ae,
                                            isEmailLoginEnabled: p.length > 0,
                                            idps: m,
                                            isCommunityInstalled: oe,
                                            privacyNoteType: We,
                                            joinCommunityCheckedByDefault: ze,
                                            isTermsOfUseNeeded: !(!(null == $e ? void 0 : $e.enabled) || !Ce.termsOfUse),
                                            isPrivacyPolicyNeeded: !(!(null == Ve ? void 0 : Ve.enabled) || !Ce.privacyPolicy),
                                            isCodeOfConductNeeded: !(!(null == xe ? void 0 : xe.enabled) || !Ce.codeOfConduct),
                                            shouldForceCaptchaVerification: !s.invisible.signup && g,
                                            termsOfUseLink: Ce.termsOfUse,
                                            privacyPolicyLink: Ce.privacyPolicy,
                                            codeOfConductLink: Ce.codeOfConduct,
                                            serverError: i,
                                            reportBi: C.reportBi,
                                            translations: Se
                                        },
                                        b = {
                                            onCloseDialogCallback() {
                                                (0, k.CY)(Pe, u), ri.hideDialog(), oi.closingDialog("SignUpDialog", a), ui.rejectAuthenticationRequest()
                                            },
                                            submit(i, o, s) {
                                                let r;
                                                if (oe) {
                                                    r = ("boolean" == typeof s ? s : s.isCommunityChecked) ? Q.iY.PUBLIC : Q.iY.PRIVATE
                                                }
                                                const c = "boolean" == typeof s || null == s ? void 0 : s.recaptchaToken;
                                                return n.interactionStarted(y.SE.DEFAULT_SIGNUP), oi.emailAuthSubmitClicked("SignUpDialog", a), hi.register(i, o, void 0, r, !0, t, c, void 0, e).then((e => {
                                                    n.interactionEnded(y.SE.DEFAULT_SIGNUP);
                                                    const {
                                                        member: i,
                                                        sessionToken: o,
                                                        pages: a
                                                    } = e;
                                                    o && (ri.hideDialog(), l(Object.assign({
                                                        member: i,
                                                        sessionToken: o
                                                    }, t ? {
                                                        pages: a
                                                    } : {})))
                                                })).catch((e => {
                                                    throw (0, k.fJ)(e) && n.interactionEnded(y.SE.DEFAULT_SIGNUP), e
                                                }))
                                            },
                                            onSwitchDialogLinkClick() {
                                                hi.showLoginDialog({
                                                    isCloseable: o,
                                                    displayMode: a,
                                                    returnPages: t
                                                }).then(l, (() => {
                                                    ui.rejectAuthenticationRequest()
                                                }))
                                            },
                                            onTokenMessage(e, i, o = !1) {
                                                let a;
                                                return oe && (a = o ? "PUBLIC" : "PRIVATE"), hi.handleOauthToken(e, i, "memberLoginDialog", a, t).then((e => {
                                                    ri.hideDialog(), l(e)
                                                }))
                                            },
                                            onBackendSocialLogin(e, i) {
                                                return hi.handleSocialLoginResponse(e, i, t).then((e => {
                                                    ri.hideDialog(), l(e)
                                                }))
                                            },
                                            getHostReadyPayload: () => ({
                                                visitorId: he(),
                                                svSession: pe
                                            }),
                                            openCaptcha: (0, h.yT)({
                                                captcha: L,
                                                userLanguage: d.userLanguage
                                            }),
                                            reportSocialAuthStarted: mi
                                        };
                                    oi.loginOrSignUpDialogLoaded("SignUpDialog", a), await ri.displayDialog("SignUpDialog", v, b, Ze()), hi.closeCustomAuthenticationDialogs(!0)
                                }))
                            },
                            async hideAuthDialog() {
                                console.warn("hideAuthDialog is not supported")
                            },
                            async showNotificationDialog(e, i, t, o = (() => 0), a = (() => 0)) {
                                const n = {
                                        isCloseable: !0,
                                        title: e,
                                        description: i,
                                        okButtonText: t,
                                        translations: Se
                                    },
                                    s = {
                                        onCloseDialogCallback() {
                                            (0, k.CY)(Pe, u), oi.closingDialog("NotificationDialog"), ri.hideDialog(), a()
                                        },
                                        onOkButtonClick() {
                                            ri.hideDialog(), o()
                                        }
                                    };
                                await ri.displayDialog("NotificationDialog", n, s)
                            },
                            async showConfirmationEmailDialog(e, i = !0) {
                                return new Promise(((t, o) => {
                                    const a = {
                                            isCloseable: !0,
                                            isSignUp: i,
                                            translations: Se
                                        },
                                        n = {
                                            onCloseDialogCallback() {
                                                (0, k.CY)(Pe, u), oi.closingDialog("ConfirmationEmailDialog"), ri.hideDialog(), ui.rejectAuthenticationRequest(), o(y.$9.CANCELED)
                                            },
                                            async onResendConfirmationEmail() {
                                                await hi.resendEmailVerification(e), await hi.showConfirmationEmailDialog(e, !1).catch(o)
                                            }
                                        };
                                    ri.displayDialog("ConfirmationEmailDialog", a, n)
                                }))
                            },
                            async showAdminApprovalDialog(e) {
                                return new Promise(((i, t) => {
                                    const o = () => {
                                        (0, k.kS)(u, Pe, {
                                            error: k.nA.ACCESS_DENIED
                                        }), ui.rejectAuthenticationRequest(), t(y.$9.CANCELED)
                                    };
                                    hi.showNotificationDialog("", `${Se.applySuccess1} ${Se.applySuccess2}`.replace("{0}", e), Se.containerOk, o, o)
                                }))
                            },
                            async showCustomAuthenticationDialog(e, i = !1) {
                                if (!w) throw new Error("popup unavailable");
                                return new Promise((async (t, o) => {
                                    ui.assignRequestAuthenticationPromise(t, o);
                                    const a = hi.registerToUserLogin((async () => {
                                        ui.resolveAuthenticationRequest(Object.assign({
                                            member: Ye,
                                            sessionToken: Je
                                        }, i ? {
                                            pages: await hi.authorizeMemberPagesBySignedInstance(Ke)
                                        } : {})), hi.unRegisterToUserLogin(a), w.getCurrentLightboxId() === e && w.close()
                                    }), "customAuthCbId");
                                    await ui.openPopupPage(e, (() => {
                                        hi.unRegisterToUserLogin(a)
                                    })), ri.hideDialog()
                                }))
                            },
                            async closeCustomAuthenticationDialogs(e = !1) {
                                const i = null == w ? void 0 : w.getCurrentLightboxId();
                                i && [Ge, qe].includes(i) && (e && ui.preventCustomPopupCloseCallback(), await w.close(), ui.allowCustomPopupCloseCallback())
                            },
                            getForgotPasswordToken() {
                                return new URL((0, m.yF)(u) ? Pe : u.location.href).searchParams.get("forgotPasswordToken")
                            },
                            shouldDisplayWelcomeDialog() {
                                return de && we
                            },
                            async showVerificationCodeDialog(e) {
                                return new Promise((async (i, t) => {
                                    var o, a;
                                    n.interactionStarted(y.SE.VERIFICATION_CODE), oi.siteMembersEmailConfirmationNewMembersModalLoad(), ui.assignRequestAuthenticationPromise(i, t);
                                    const s = {
                                            language: d.userLanguage,
                                            directionByLanguage: d.directionByLanguage,
                                            isCloseable: null === (a = null === (o = ui.config) || void 0 === o ? void 0 : o.isCloseable) || void 0 === a || a,
                                            displayMode: "customPopup",
                                            email: null == e ? void 0 : e.email,
                                            error: null == e ? void 0 : e.error,
                                            translations: Se
                                        },
                                        r = {
                                            onResendVerificationCodeEmail() {
                                                oi.siteMembersEmailConfirmationOnResendCodeClick(), i(null)
                                            },
                                            onCloseDialogCallback() {
                                                oi.closingDialog("VerificationCode"), (0, k.CY)(Pe, u), ri.hideDialog(), ui.rejectAuthenticationRequest(), t(y.$9.CANCELED)
                                            },
                                            onSubmitCallback(e) {
                                                oi.siteMembersEmailConfirmationSendCodeClick(), i(e)
                                            }
                                        };
                                    n.interactionEnded(y.SE.VERIFICATION_CODE), ri.displayDialog("VerificationCodeDialog", s, r)
                                }))
                            },
                            async appWillMount() {
                                te && await hi.getMemberDetails();
                                switch (new URL(s.requestUrl).searchParams.get("showDialog")) {
                                    case "MemberLoginDialog":
                                        hi.showLoginDialog();
                                        break;
                                    case "SignUpDialog":
                                        hi.showSignUpDialog();
                                        break;
                                    case "RequestPasswordResetDialog":
                                        hi.promptForgotPassword();
                                        break;
                                    case "ResetPasswordDialog":
                                        hi.showResetPasswordDialog("faketoken");
                                        break;
                                    case "WelcomeDialog":
                                        hi.showWelcomeDialog();
                                        break;
                                    case "NoPermissionsToPageDialog":
                                        hi.showNoPermissionsToPageDialog();
                                        break;
                                    case "NotificationDialog":
                                        hi.showNotificationDialog("title", "description", "ok");
                                        break;
                                    case "ConfirmationEmailDialog":
                                        hi.showConfirmationEmailDialog("fakemember");
                                        break;
                                    case "VerificationCodeDialog":
                                        hi.showVerificationCodeDialog({
                                            email: "testEmail@test.com"
                                        })
                                }
                            },
                            pageWillUnmount({
                                pageId: e
                            }) {
                                [Ge, qe].includes(e) || ri.hideDialog()
                            },
                            getSocialAuthComponentProps() {
                                return (0, k.IO)({
                                    config: e,
                                    viewerModel: s,
                                    sessionManager: r,
                                    bsiManager: T,
                                    handleOauthToken: hi.handleOauthToken,
                                    handleSocialLoginResponse: hi.handleSocialLoginResponse,
                                    isSocialAuthSupported: Re,
                                    captcha: L,
                                    userLanguage: d.userLanguage,
                                    reportBi: C.reportBi,
                                    reportSocialAuthStarted: mi,
                                    useNewSocialFlow: !!I["specs.thunderbolt.ShouldUseNewIAMSocialFlow"],
                                    translations: Se
                                })
                            },
                            async getConnections() {
                                if (I["specs.thunderbolt.useIAMEnabledConnections"]) return li.getEnabledConnections().then((e => e.map((({
                                    id: e,
                                    appDefId: i,
                                    displayName: t
                                }) => ({
                                    id: e,
                                    appDefId: i,
                                    name: t
                                })))));
                                const e = new URL(Pe).searchParams.get("idpConnectionId");
                                return [...ue ? [] : [{
                                    id: y.Ld.PASSWORD,
                                    appDefId: y.Ld.PASSWORD,
                                    name: "Password"
                                }], ...Fe ? [{
                                    id: y.Ld.GOOGLE,
                                    appDefId: y.Ld.GOOGLE,
                                    name: "Google"
                                }] : [], ...je && !ue ? [{
                                    id: y.Ld.FACEBOOK,
                                    appDefId: y.Ld.FACEBOOK,
                                    name: "Facebook"
                                }] : [], ...e ? [{
                                    id: e,
                                    appDefId: e,
                                    name: "SSO"
                                }] : []]
                            }
                        };
                    return o.export({
                        promptLogin: hi.promptLogin,
                        logout: hi.logout,
                        memberDetails: Ye
                    }), t.update((() => ({
                        shouldShowRenderingBlockingDialogs: () => !(!hi.getForgotPasswordToken() && !hi.shouldDisplayWelcomeDialog()),
                        showRenderingBlockingDialogs: () => {
                            const e = hi.getForgotPasswordToken();
                            return e ? hi.showResetPasswordDialog(e) : hi.shouldDisplayWelcomeDialog() ? hi.showWelcomeDialog() : void 0
                        }
                    }))), hi
                }));
            var ie = t(59032),
                te = t(95793),
                oe = t(81600);
            const ae = (0, o.ff)([E.n9], (e => ({
                    getTpaHandlers() {
                        const i = async (i, t, o) => {
                                var a, n, s;
                                const r = await e.getMemberDetails(!0);
                                return r ? (null === (a = o.appClientSpecMapData) || void 0 === a ? void 0 : a.isWixTPA) ? {
                                    attributes: {
                                        firstName: null !== (n = r.firstName) && void 0 !== n ? n : "",
                                        lastName: null !== (s = r.lastName) && void 0 !== s ? s : "",
                                        privacyStatus: r.profilePrivacyStatus
                                    },
                                    name: r.memberName,
                                    email: r.loginEmail,
                                    id: r.id,
                                    owner: r.owner,
                                    status: r.status
                                } : {
                                    id: r.id,
                                    owner: r.owner,
                                    status: r.status
                                } : null
                            },
                            t = async (i, t = {}) => {
                                var o, a;
                                const {
                                    member: n
                                } = await e.promptLogin({
                                    mode: t.mode,
                                    modal: t.modal
                                });
                                return {
                                    attributes: {
                                        firstName: null !== (o = n.firstName) && void 0 !== o ? o : "",
                                        lastName: null !== (a = n.lastName) && void 0 !== a ? a : "",
                                        privacyStatus: n.profilePrivacyStatus
                                    },
                                    name: n.memberName,
                                    email: n.loginEmail,
                                    id: n.id,
                                    owner: n.owner,
                                    status: n.status
                                }
                            };
                        return {
                            currentMember: i,
                            smCurrentMember: i,
                            logOutCurrentMember: (0, oe.u)(["site"], ((i, t) => {
                                e.logout(null == t ? void 0 : t.url)
                            })),
                            requestLogin: (0, oe.u)(["site"], t),
                            smRequestLogin: (0, oe.u)(["site"], t)
                        }
                    }
                }))),
                ne = (0, o.ff)([E.n9, (0, o.t6)(a.$e, E.u2), r.xP], ((e, {
                    componentIds: i
                }, t) => ({
                    name: "site-members-components",
                    pageWillMount() {
                        const o = i.reduce(((i, t) => {
                            const o = e.getSocialAuthComponentProps();
                            return Object.assign(Object.assign({}, i), {
                                [t]: o
                            })
                        }), {});
                        t.update(o)
                    }
                }))),
                se = (0, o.ff)([(0, o.t6)(a.Wf, E.u2)], (e => ({
                    handle: async i => {
                        const {
                            shouldShowRenderingBlockingDialogs: t,
                            showRenderingBlockingDialogs: o
                        } = e.get();
                        return t() ? (o(), null) : i
                    }
                }))),
                re = e => {
                    e(E.n9, ie.j.AppWillMountHandler, ie.j.AppDidMountHandler).to(ee), e(b.BD.BlockingDialogs).to(se)
                },
                le = e => {
                    e(te.go).to(ae), e(ie.j.PageWillMountHandler).to(ne), e(ie.j.PageWillUnmountHandler).to((0, o.ff)([E.n9], (e => ({
                        pageWillUnmount(i) {
                            return e.pageWillUnmount(i)
                        }
                    }))))
                }
        }
    }
]);
//# sourceMappingURL=https://static.parastorage.com/services/wix-thunderbolt/dist/group_8.b4086e31.chunk.min.js.map